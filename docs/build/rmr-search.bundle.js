/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/scripts/build.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/fuse.js/dist/fuse.esm.js":
/*!***********************************************!*\
  !*** ./node_modules/fuse.js/dist/fuse.esm.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Fuse);\n\n\n//# sourceURL=webpack:///./node_modules/fuse.js/dist/fuse.esm.js?");

/***/ }),

/***/ "./node_modules/rmr-util/index.js":
/*!****************************************!*\
  !*** ./node_modules/rmr-util/index.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/* global */\n\n(() => {\n\n  'use strict';\n\n  const\n  breakpoints = [\n    {\n      name: 'xs',\n      value: 0\n    },\n    {\n      name: 'sm',\n      value: 576\n    },\n    {\n      name: 'md',\n      value: 768\n    },\n    {\n      name: 'lg',\n      value: 992\n    },\n    {\n      name: 'xl',\n      value: 1200\n    },\n    {\n      name: 'xxl',\n      value: 2000\n    }\n\n  ],\n  easeInOutQuad = function(t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t };\n\n  /**\n   * rmr-util\n   *\n   * JS for your browser\n   *\n   *\n   *\n   */\n\n\n  const\n\n  /**\n   *\n   *\n   */\n   Base64 = {\n    _keyStr: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\",\n    encode: function(e) {\n      let t=\"\";\n      let n,r,i,s,o,u,a;\n      let f=0;\n      e = Base64._utf8_encode(e);\n      while (f <e.length) {\n        n = e.charCodeAt(f++);\n        r = e.charCodeAt(f++);\n        i = e.charCodeAt(f++);\n        s = n >> 2;\n        o = (n&3)<<4|r>>4;\n        u=(r&15)<<2|i>>6;\n        a = i & 63;\n        if (isNaN(r)) {\n          u = a = 64;\n        } else if (isNaN(i)) {\n          a =64;\n        }\n        t = t + this._keyStr.charAt(s) + this._keyStr.charAt(o) + this._keyStr.charAt(u) + this._keyStr.charAt(a);\n      }\n      return t;\n    },\n\n    decode: function(e) {\n\n      let t = \"\";\n      let n,r,i, s,o,u,a;\n      let f = 0;\n\n      e = e.replace(/[^A-Za-z0-9\\+\\/\\=]/g,\"\");\n\n      while (f < e.length) {\n        s = this._keyStr.indexOf(e.charAt(f++));\n        o = this._keyStr.indexOf(e.charAt(f++));\n        u = this._keyStr.indexOf(e.charAt(f++));\n        a = this._keyStr.indexOf(e.charAt(f++));\n        n = s << 2 | o>>4;\n        r = (o & 15) << 4 | u >> 2;\n        i = (u & 3) << 6 | a;\n        t = t + String.fromCharCode(n);\n        if (u !== 64) {\n          t = t+String.fromCharCode(r);\n        }\n        if (a !== 64) {\n          t = t+String.fromCharCode(i);\n        }\n      }\n      t = Base64._utf8_decode(t);\n      return t;\n    },\n    _utf8_encode: function(e) {\n      e = e.replace(/\\r\\n/g,\"\\n\");\n      let t=\"\",\n      n = 0;\n      for (n = 0; n < e.length;n++) {\n        const r = e.charCodeAt(n);\n        if (r < 128) {\n          t += String.fromCharCode(r);\n        } else if (r > 127 && r < 2048) {\n          t += String.fromCharCode(r>>6|192);\n          t += String.fromCharCode(r&63|128);\n        } else {\n          t += String.fromCharCode(r>>12|224);\n          t += String.fromCharCode(r>>6&63|128);\n          t += String.fromCharCode(r&63|128);\n        }\n      }\n      return t;\n    },\n\n    _utf8_decode: function(e) {\n      let\n      t = \"\",\n      n = 0,\n      r = 0,\n      c2 = 0,\n      c3 = 0;\n\n      while (n < e.length) {\n        r = e.charCodeAt(n);\n        if (r<128) {\n          t += String.fromCharCode(r);\n          n++;\n        } else if (r > 191 && r < 224) {\n          c2 = e.charCodeAt(n+1);\n          t += String.fromCharCode((r&31)<<6|c2&63);\n          n += 2;\n        } else {\n          c2 = e.charCodeAt(n+1);\n          c3 = e.charCodeAt(n+2);\n          t += String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);\n          n += 3;\n        }\n      }\n      return t;\n    }\n  },\n\n  /**\n   * Retrieve an element via query selector, or\n   *\n   * @param {Mixed} arg the element to retrieve, or null if no such element exists\n   * @param {Mixed, optional} the root node from which the query selector should select;\n   * @return {Element} element corresponding to the selector, or `null` if no such element exists\n   */\n  getElement = function(arg, parent) {\n    if (typeof arg === 'string') {\n\n      const root = (parent ? getElement(parent) : document);\n      if (! root) {\n        console.error('Invalid root for selector `' + arg + '`', parent);\n        return null;\n      }\n\n      return root.querySelector(arg);\n    } else if (arg instanceof HTMLElement) {\n      return arg;\n    }\n\n    return null;\n  },\n\n  /**\n   * Determine if a variable/object is an HTML element\n   *\n   * @param {Mixed}\n   * @return {Bool}\n   */\n  isAnElement = function(arg) {\n    return arg instanceof HTMLElement;\n  },\n\n  /**\n   * Determine if a string is a valid internet URL\n   *\n   * @param {String} str - the string to be tested\n   * @return {Bool} - `true` of `false`\n   */\n  isURL = function(str) {\n    return /^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i.test(str);\n  },\n\n  /**\n   * Determine if a string is a valid email\n   *\n   * @param {String} str - the string to be tested\n   * @return {Bool} - `true` of `false`\n   */\n  isEmail = function(str) {\n\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(str).toLowerCase());\n  },\n\n\n  /**\n    Format a latitude coordinate value into a human-friendly string\n\n    @param {Float} lat  value to be formatted\n    @return {String} formatted latitude string\n   */\n  formatLatitude = function(lat) {\n\n    let\n    value = parseFloat(lat),\n    degrees = 0,\n    minutes = 0,\n    seconds = 0;\n\n    const dir = value <  0 ? 'S' : 'N';\n\n    degrees = parseInt(value);\n    value = (value - degrees) * 60;\n\n    minutes = parseInt(value);\n    seconds = (value - minutes) * 60;\n\n    if (seconds < 0) {\n      seconds *= -1;\n    }\n\n    return Math.abs(degrees) + 'º' + Math.abs(minutes) + '’' + seconds.toFixed(2) + '”' + dir;\n  },\n\n  /**\n    Format a longitude coordinate value into a human-friendly string\n\n    @param {Float} lon  value to be formatted\n    @return {String} formatted longitude string\n   */\n  formatLongitude = function(lon) {\n\n    let\n    value = parseFloat(lon),\n    degrees = 0,\n    minutes = 0,\n    seconds = 0;\n\n    const dir = value <  0 ? 'W' : 'E';\n\n    degrees = parseInt(value);\n    value = (value - degrees) * 60;\n\n    minutes = parseInt(value);\n    seconds = (value - minutes) * 60;\n\n    return Math.abs(degrees) + 'º' + Math.abs(minutes) + '’' + Math.abs(seconds.toFixed(2)) + '”' + dir;\n  },\n\n\n  /**\n   * Determine if a node matches a provided selector\n   *\n   * @param {HTMLElement} node  the element to be tested\n   * @param {String} selector the selector string to test\n   * @return {Bool} `true` or `false`\n   */\n  selectorMatches = function (node, selector) {\n\n    const\n    p = Element.prototype,\n    f = p.matches || p.webkitMatchesSelector || p.mozMatchesSelector || p.msMatchesSelector || function matches() {\n      return [].indexOf.call(document.querySelectorAll(selector), this) !== -1;\n    };\n    try {\n      return f.call(node, selector);\n    } catch (e) {\n      return false;\n    }\n  },\n\n  /**\n   * Determine if we're in a touch-based browser (phone/tablet)\n   *\n   * @return {Bool} `true` or `false`\n   */\n  isTouch = function() {\n\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    return typeof window.orientation !== 'undefined';\n  },\n\n  /**\n   * Determine if we're in Safari\n   *\n   * @return {Bool} `true` or `false`\n   */\n  isSafari = function() {\n\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    return /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n  },\n\n  /**\n   * Determine if we're in Firefox\n   *\n   * @return {Bool} `true` or `false`\n   */\n  isFirefox = function() {\n\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return false;\n    }\n    return navigator.userAgent.indexOf(\"Firefox\") > 0;\n  },\n\n  /**\n   * Is the browser capable of opening new windows/tabs with \"data:\" protocol\n   *\n   * @see https://groups.google.com/a/chromium.org/forum/#!topic/blink-dev/GbVcuwg_QjM%5B1-25%5D\n   * @return {Bool} `true` if the browser opens `data:` URLs; `false` if not\n   */\n  opensData = function() {\n    return isFirefox() || isSafari();\n  },\n\n  /**\n   * Retrieve an object containing browser/screen coordinates for a DOM element\n   *\n   * @param {Element} node the element whose coordinates should be retrieved\n   * @return {Object} An object containing { top : xx, left : xx, bottom: xx, right: xx, width: xx, height: xx }\n   */\n  getRect = function(node) {\n\n    node = getElement(node);\n    if (!node) {\n      return { top: 0, left: 0, right: 0, width: 0, height: 0 };\n    }\n\n    const\n    rect = node.getBoundingClientRect(),\n    ret = { top: rect.top, left: rect.left, bottom: rect.bottom, right: rect.right }; // create a new object that is not read-only\n\n    ret.top += window.pageYOffset;\n    ret.left += window.pageXOffset;\n\n    ret.bottom += window.pageYOffset;\n    ret.right += window.pageYOffset;\n\n    ret.width = rect.right - rect.left;\n    ret.height = rect.bottom - rect.top;\n\n    return ret;\n  },\n\n  /**\n   * Scroll to an element\n   *\n   * @param {Mixed} y - vertical offset to scroll to, or selector/node references for the Element to scroll to\n   * @param {Integer} duration - # of milliseconds animation should run\n   */\n  scrollTo = function(y, duration) {\n\n    if (arguments.length === 1) {\n      duration = 200;\n    }\n\n    if (typeof y === 'string' || y instanceof Element) {\n      y = getRect(y).top;\n    }\n\n    const\n    timing = easeInOutQuad,\n    startingY = window.pageYOffset,\n    diff = y - startingY;\n\n    let start = performance.now();\n\n    // Bootstrap our animation - it will get called right before next frame shall be rendered.\n    window.requestAnimationFrame(function step(timestamp) {\n\n      const\n      time = timestamp - start,\n      percent = Math.min(time / duration, 1);\n\n      window.scrollTo(0, startingY + diff * timing(percent));\n\n      // Proceed with animation as long as we wanted it to.\n      if (time < duration) {\n        window.requestAnimationFrame(step);\n      }\n    });\n  },\n\n  scrollNodeTo = function(element, to, duration, onDone) {\n\n    element = getElement(element);\n    const node = getElement(to, element);\n    if (node) {\n      to = relativePosition(node).top;\n    }\n    else {\n      to = parseInt(to, 10);\n    }\n\n    if (! duration) {\n      duration = 200;\n    }\n\n    let\n    start = element.scrollTop,\n    change = to - start,\n    startTime = performance.now(),\n    now, elapsed, t;\n\n    function animateScroll() {\n      now = performance.now();\n      elapsed = now - startTime;\n      t = (elapsed / duration);\n\n      element.scrollTop = start + change * easeInOutQuad(t);\n      if (t < 1) {\n        window.requestAnimationFrame(animateScroll);\n      }\n      else {\n        element.scrollTop = to;\n        onDone && onDone();\n      }\n    }\n\n    animateScroll();\n  },\n  \n  /**\n   *\n   *\n   */\n  relativePosition = function(node) {\n\n    node = getElement(node);\n\n    const\n    pPos = node.parentNode.getBoundingClientRect(), // parent pos\n    cPos = node.getBoundingClientRect(), // target pos\n    pos = {};\n\n    pos.top = cPos.top - pPos.top + node.parentNode.scrollTop,\n    pos.right = cPos.right - pPos.right,\n    pos.bottom = cPos.bottom - pPos.bottom,\n    pos.left = cPos.left - pPos.left;\n\n    return pos;\n  },\n\n  /*\n   * Generate a unique string suitable for id attributes\n   *\n   * @param basename (String)\n   * @return string\n   */\n  guid = function(basename) {\n    return (basename ? basename : 'rmr-guid-') + parseInt(Math.random() * 100, 10) + '-' + parseInt(Math.random() * 1000, 10);\n  },\n\n  /*\n   * Merge two objects into one, values in b take precedence over values in a\n   *\n   * @param a {Object}\n   * @param b {Object}\n\n   * @return Object\n   */\n  objectMerge = function(a, b) {\n    const o = {};\n    let i = null;\n    for (i in a) {\n      if (objectHas(a, i)) {\n        o[i] = a[i];\n      }\n    }\n    if (! b) {\n      return o;\n    }\n    for (i in b) {\n      if (objectHas(b, i)) {\n        o[i] = b[i];\n      }\n    }\n    return o;\n  },\n\n  /**\n   * Convert an array-like thing (ex: NodeList or arguments object) into a proper array, or convert a scalar into a single-element array\n   *\n   * @param {Mixed} list an array-like thing or a scalar\n   * @return {Array} the param as an array\n   */\n  arr = function(list) {\n\n    const ret = [];\n    let i = 0;\n\n    if (list instanceof Array) {\n      return list;\n    }\n\n    if (typeof list.length !== 'number') {\n      return [list];\n    }\n\n    for (i = 0; i < list.length; i++) {\n      if (objectHas(list, i)) {\n        ret.push(list[i]);\n      }\n    }\n\n    return ret;\n  },\n\n\n  /**\n   * Remove an object from an array\n   *\n   * @param {Array} array containing object to be removed\n   * @param {Any} item to be removed\n   * @return {Array} array for chaining\n   */\n  arrayRemove = function(array, item) {\n    return arr(array).filter(e => e !== item);\n  },\n\n  /**\n   * Return the index of an item in an array\n   *\n   * @param {Array} list that should be searched\n   * @param {Function} func comparator function that takes on argument\n   * @return {Integer} index of the item in the array, or -1 if it doesn't exist\n   */\n  arrayFind = function(list, func) {\n\n    const array = arr(list);\n\n    if (typeof func !== 'function') {\n\n      const\n      target = func,\n      lookup = function(param) {\n\n        if (typeof param === 'object' && objectHas(param, 'id')) {\n          if (typeof target === 'object' && objectHas(target, 'id')) {\n            return param.id === target.id;\n          }\n          return param.id === target;\n        }\n\n        return param === target;\n       };\n      func = lookup;\n    }\n    for (const i in array) {\n      if (! objectHas(array, i)) {\n        continue;\n      }\n\n      if (array[i] === func || func(array[i])) {\n        return parseInt(i, 10);\n      }\n    }\n    return -1;\n  },\n\n  /**\n   * Shift the objects within an array so that a given item is first\n   *\n   * @param {Array} array containing object to be removed\n   * @param {Any} item to be made the first\n   * @return {Array} array for chaining\n   */\n  arrayReorder = function(array, item) {\n\n    const\n      list = arr(array),\n      reordered = [];\n\n    const index = arrayFind(list, item);\n    if (index === -1) {\n      return list;\n    }\n\n    reordered.push(list[index]);\n\n    for (let i = index + 1; i < list.length; i++) {\n      reordered.push(array[i]);\n    }\n\n    for (let i = 0; i < index; i++) {\n      reordered.push(array[i]);\n    }\n\n    return reordered;\n  },\n\n\n  /**\n   * Remove all children from a node (optionally matching a selector)\n   *\n   * @param {Mixed} arg - node or selector whose children should be removed\n   * @param {String,optional} selector - query selector that children must match in order to be removed\n   * @return {HTMLElement} - for chaining\n   */\n  pruneElement = function(arg, selector) {\n\n    const node = getElement(arg);\n    if (! node) {\n      return null;\n    }\n    if (selector) {\n      let n = arr(arg.querySelectorAll(selector));\n      for (let i = 0; i < n.length; i++) {\n        removeNode(n[i]);\n      }\n    }\n    else {\n      while (node.firstChild) {\n        node.removeChild(node.firstChild);\n      }\n    }\n\n    return node;\n  },\n\n\n  /**\n   * Retrieve an element via query selector\n   *\n   * @param {Mixed} arg selector, or an array of elements to attach\n   * @param {Mixed,optional} scope the parent node\n   * @return {[Element]} array of elements\n   */\n  getElements = function(arg, scope) {\n\n    if (! scope) {\n      scope = document;\n    }\n    else {\n      scope = getElement(scope);\n    }\n\n    if (typeof arg === 'string') {\n      return arr(scope.querySelectorAll(arg));\n    }\n\n    return arr(arg);\n  },\n\n  /*\n   * Create an element with a set of attributes/values\n   *\n   * @param type (String)\n   * @param attrs {Object}\n   *\n   * @return HTMLElement\n   */\n  makeElement = function(type, attrs) {\n\n     const n = document.createElement(type);\n\n     for (const i in attrs) {\n       if (objectHas(attrs, i) && attrs[i]) {\n         n.setAttribute(i, attrs[i]);\n       }\n     }\n     return n;\n  },\n\n  /**\n   * Make loader\n   *\n   * @return {String} SVG element\n   */\n  loader = function() {\n\n/*\n    const svg = makeElement('svg', {\n      version: '1.1',\n      class: 'rmr-loader',\n      xmlns: 'http://www.w3.org/2000/svg',\n      'xmlns:xlink': 'http://www.w3.org/1999/xlink',\n      x: '0px',\n      y: '0px',\n      width: '40px',\n      height: '40px',\n      viewBox: '0 0 40 40',\n      'enable-background': 'new 0 0 40 40',\n      'xml:space': 'preserve'\n    });\n\n    svg.innerHTML =\n    '<path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946 s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634 c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"></path>' +\n    '<path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0 C22.32,8.481,24.301,9.057,26.013,10.047z\">' +\n    '<animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 20 20\" to=\"360 20 20\" dur=\"0.8s\" repeatCount=\"indefinite\"></animateTransform>' +\n    '</path>';\n*/\n\n    return '<svg version=\"1.1\" class=\"rmr-loader\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" width=\"40px\" height=\"40px\" viewBox=\"0 0 40 40\" enable-background=\"new 0 0 40 40\" xml:space=\"preserve\">' +\n    '<path opacity=\"0.2\" fill=\"#000\" d=\"M20.201,5.169c-8.254,0-14.946,6.692-14.946,14.946c0,8.255,6.692,14.946,14.946,14.946 s14.946-6.691,14.946-14.946C35.146,11.861,28.455,5.169,20.201,5.169z M20.201,31.749c-6.425,0-11.634-5.208-11.634-11.634 c0-6.425,5.209-11.634,11.634-11.634c6.425,0,11.633,5.209,11.633,11.634C31.834,26.541,26.626,31.749,20.201,31.749z\"></path>' +\n    '<path fill=\"#000\" d=\"M26.013,10.047l1.654-2.866c-2.198-1.272-4.743-2.012-7.466-2.012h0v3.312h0 C22.32,8.481,24.301,9.057,26.013,10.047z\">' +\n    '<animateTransform attributeType=\"xml\" attributeName=\"transform\" type=\"rotate\" from=\"0 20 20\" to=\"360 20 20\" dur=\"0.8s\" repeatCount=\"indefinite\"></animateTransform>' +\n    '</path>' +\n    '</svg>';\n\n//    return svg;\n  },\n\n\n  /**\n   * Bind variables to placeholders in a string\n   *\n   * @param {String} subject \n   * @param {Object} lookup table containing key/value pairs\n   * @return {String} string\n   */\n  bindString = function(subject, lookup) {\n\n    let str = subject;\n\n    for (const key in lookup) {\n      if (! objectHas(lookup, key)) {\n        continue;\n      }\n      str = str.replace(key, lookup[key])\n    }\n\n    return str;\n  },\n\n  /**\n   * Localize a string\n   *\n   * {\n   *   'en' : {\n   *      'key' : 'neighbor'\n   *    },\n   *    'en-ca' : {\n   *      'key' : 'neighbour'\n   *    }\n   *  }\n   *\n   * @param {Object} lookup dictionary\n   * @param {String} key the to localize\n   * @return {String} string\n   */\n  localize = function(lookup, key) {\n\n    if (typeof navigator === 'undefined') {\n      return key;\n    }\n\n    let i, lang;\n\n    for (i in navigator.languages) {\n      if (! objectHas(navigator.languages, i)) {\n        continue;\n      }\n      lang = navigator.languages[i].toLowerCase();\n      if (objectHas(lookup, lang) && objectHas(lookup[lang], key)) {\n        return lookup[lang][key];\n      }\n    }\n    console.warn('No localization for ' + key);\n    return key;\n  },\n\n  /**\n   * Apply styles to a node\n   *\n   * @param {HTMLElement} node that should have styles applied\n   * @param {Object} styles key/value pairs for styles and values\n   * @return {Element} node\n   */\n  setStyles = function(node, styles) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    for (const i in styles) {\n      if (objectHas(styles, i) && styles[i]) {\n        node.style[i] = styles[i];\n      }\n    }\n\n    return node;\n  },\n\n  /**\n   * Apply styles to a node\n   *\n   * @param {HTMLElement} node that should have styles applied\n   * @param {Object} styles key/value pairs for styles and values\n   * @return {Element} node\n   */\n  walkDOM = function(node, func) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    func(node);\n    node = node.firstChild;\n    while (node) {\n      walkDOM(node,func);\n      node = node.nextSibling;\n    }\n\n    return node;\n  },\n\n\n  /**\n   * Apply attributes to a node\n   *\n   * @param {HTMLElement} node that should have styles applied\n   * @param {Object} styles key/value pairs for styles and values\n   * @return {Element} node\n   */\n  setAttributes = function(node, attrs) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    for (const i in attrs) {\n      if (objectHas(attrs, i) && attrs[i]) {\n        if (attrs[i]) {\n          node.setAttribute([i], attrs[i]);\n        } else {\n          node.removeAttribute([i], attrs[i]);\n        }\n      }\n    }\n\n    return node;\n  },\n\n\n  /**\n   * Build a query string from an object\n   *\n   * @param {Object} obj the object to be passed via URL\n   * @return {String} str query string corresponding to the object\n   */\n  queryString = function(obj) {\n\n    if (Object.keys(obj).length === 0) {\n      return '';\n    }\n\n    return Object.keys(obj).reduce((a,k) => {\n      a.push(k + '=' + encodeURIComponent(obj[k]));\n      return a;\n    },[]).join('&');\n  },\n\n\n  /**\n   * Return an array of all keys in an object (polyfill for Object.keys)\n   *\n   * @param {Object} obj object whose keys should be retrieved\n   * @return {Array} key list\n   */\n  objectKeys = function(obj) {\n\n    if (typeof Object !== \"undefined\" && typeof(Object.keys) !== \"undefined\") {\n      return Object.keys(obj);\n    }\n\n    const a = [];\n    for (const i in obj) {\n      if (objectHas(obj, i)) {\n        a.push(i);\n      }\n    }\n\n    return a;\n  },\n\n  /**\n   * Retrieve (potentially nested) value from object\n   *\n   * @param {Object} object - target object to be inspected\n   * @param {String} path - nested paths\n   * @param {Mixed} fallback - value to return if path not found (default to `null`)\n   * @return {Mixed} - value found at path, or `null` if no such path exists\n   */\n  objectGet = function(object, path, fallback) {\n\n    const bits = path.split('.');\n    let target = object;\n\n    for (let i = 0; i < bits.length; i++) {\n      if (! objectHas(target, bits[i])) {\n        return fallback ? fallback : null;\n      }\n      target = target[bits[i]];\n    }\n\n    return target;\n  },\n\n  objectHas = function(obj, key) {\n    return Object.prototype.hasOwnProperty.call(obj, key);\n  },\n\n\n  /**\n   * Generate an object containing keys/values corresponding to form elements\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/FormData/Using_FormData_Objects\n   * @param {Element} form element\n   * @return {Object} the key/value pairs for the form\n   */\n  objectFromForm = function(form) {\n\n    form = getElement(form);\n    if (! form) {\n      return {};\n    }\n\n    if (typeof FormData !== 'undefined') {\n//      const f = new FormData(form);\n//      console.log(f);\n//      return f;\n    }\n\n    const\n    inputs = form.querySelectorAll('select,input,textarea'),\n    params = {};\n\n    for (const i in inputs) {\n      if (! objectHas(inputs, i)) {\n        continue;\n      }\n      const\n        name = inputs[i].getAttribute('name'),\n        type = inputs[i].type ? inputs[i].type : 'text';\n\n      if (inputs[i].hasAttribute('disabled')) {\n        continue;\n      }\n\n      if (type === 'radio' || type === 'checkbox') {\n        if (inputs[i].checked) {\n          params[name] = inputs[i].value;\n        }\n      } else {\n        params[name] = inputs[i].value;\n      }\n    }\n\n    return params;\n  },\n\n  /**\n   * Add event listener to >= 1 node\n   *\n   * @param {String} selector to match nodes\n   * @param {String} eventName the event which should be listened for\n   * @param {Function} func the method to invoke when eventName occurs\n   */\n  addListener = function(selector, eventName, func) {\n    const nodes = getElements(selector);\n    let i = 0;\n\n    for (i in nodes) {\n      if (objectHas(nodes, i)) {\n        nodes[i].addEventListener(eventName, func);\n      }\n    }\n  },\n\n  /**\n   * Get a node's ancestor\n   *\n   * @param {Element} node starting point of search\n   * @param {String} ancestor the selector for the ancestor we're looking for\n   * @param {Bool} includeSelf optionally include starting point in search\n   * @return {Element} or `null` if no such ancestor exists\n   */\n  ancestor = function(node, ancestor, includeSelf) {\n\n    node = getElement(node);\n    if (! node) {\n      return null;\n    }\n\n    if (isAnElement(ancestor)) {\n      let parent = node;\n\n      if (! node.parentNode) {\n        return null;\n      }\n\n      while ( (parent = parent.parentNode) !== null) {\n        if (parent === ancestor) { \n          return parent;\n        }\n      }\n      return null;\n    }\n\n    if (includeSelf && selectorMatches(node, ancestor)) {\n      return node;\n    }\n\n    let parent = node;\n\n    if (! parent.parentNode) {\n      return null;\n    }\n\n    while ((parent = parent.parentNode) !== null) {\n\n      if (selectorMatches(parent, ancestor)) {\n        return parent;\n      }\n    }\n\n    return null;\n  },\n\n  /**\n   * Remove a DOM node from the document\n   *\n   * @param {Element} node the node to be removed\n   * @return {Bool} `true` if removed'; `false` if the node doesn't exist\n   */\n  removeNode = function(node) {\n\n    node = getElement(node);\n    if (! node) {\n      return false;\n    }\n\n    node.parentNode.removeChild(node);\n\n    return true;\n  },\n\n  validateForm = function(form) {\n    form = getElement(form);\n    if (! form) {\n      return false;\n    }\n\n    const inputs = form.querySelectorAll('*[required]');\n    let input, success, value;\n    for (const i in inputs) {\n      if (! objectHas(inputs, i)) {\n        continue;\n      }\n\n      success = true;\n      input = inputs[i];\n      value = input.value;\n\n      switch (input.nodeName.toLowerCase()) {\n\n        case 'textarea':\n          success = input.value.trim() != '';\n          break;\n\n        case 'select':\n          const r = arr(input.selectedOptions);\n          if (r.length == 0) { return input; }\n          if (r[0].value == '') {\n            success = false;\n          }\n          break;\n\n        default: // input\n          switch (input.type) {\n            case 'email':\n              success = isEmail(input.value);\n              break;\n            default: // text\n              success = input.value.trim() != '';\n          }\n      }\n\n      if (! success) {\n        return input;\n      }\n\n    }\n\n    return true;\n    \n  },\n\n  /**\n   * Make an XHR request\n   *\n   * {\n   *   form: {selector} - form element to serialize and submit via xhr\n   *   url: '{string}',\n   *   method: '{GET|POST}',\n   *   headers: [],\n   *   params: {}\n   * }\n   *\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest\n   * @param {Object} config url, method, params, form\n   * @param {Function} handler invoked on completion\n   * @return {XMLHttpRequest} object making the request\n   */\n  xhrRequest = function(config, handler) {\n\n    if (typeof XMLHttpRequest === 'undefined') {\n      return null;\n    }\n\n    const\n    defaults = {\n      form: null,\n      url: '/',\n      headers: {},\n      method: 'get',\n      params: {}\n    };\n\n    config = objectMerge(defaults, config);\n\n    if (config.form) {\n      config.form = getElement(config.form);\n      config.url = config.form.getAttribute('action'),\n      config.method = config.form.getAttribute('method') ? config.form.getAttribute('method') : 'get',\n      config.params = objectFromForm(config.form);\n    }\n\n    const xhttp = new XMLHttpRequest();\n    xhttp.onreadystatechange = function() {\n\n      if (this.readyState === 4) {\n        if (handler) {\n          handler(xhttp);\n        }\n      }\n    };\n\n    let\n    url = config.url,\n    params = '';\n\n    if (config.form) {\n      const type = config.form.getAttribute('enctype');\n      if (type) {\n        config.headers['Content-Type'] = type;\n      }\n    }\n\n    if (config.method.toUpperCase() === 'GET') {\n      url = Object.keys(config.params).length > 0 ? (url + '?' + queryString(config.params)) : url;\n    } else { // post\n      params = queryString(config.params);\n      config.headers['Content-Type'] = 'application/x-www-form-urlencoded';\n    }\n\n    config.headers['X-Requested-With'] = 'XMLHttpRequest';\n\n    xhttp.open(config.method, url, true);\n\n    for (const h in config.headers) {\n      if (objectHas(config.headers, h)) {\n        xhttp.setRequestHeader(h, config.headers[h]);\n      }\n    }\n\n    xhttp.send(params);\n\n    return xhttp;\n  },\n\n  /**\n   *\n   *\n   *\n\n  dataFromNode = function(node) {\n\n  },\n   */\n\n  /**\n   * Retrieve the last non-empty element of an array\n   *\n   * @param {Array} list - array to be iterated through\n   * @param {Function} func (optional) function used to evaluate items in the array\n   * @return {Mixed} the last non-empty value in the array (or `null` if no such value exists)\n   */\n  lastValue = function(list, func) {\n\n    list = arr(list);\n\n    let i = list.length - 1;\n    while (i >= 0) {\n      if (func ? func(list[i]) : list[i]) {\n        return list[i];\n      }\n      i--;\n    }\n\n    return null;\n  };\n\n  // for notifications\n  const subs = {\n  \n  };\n\n  /**\n   \n   \n   @param w {Int} - \n   @return {String} - \n   */\n  const breakpointUp = (w) => {\n    const arg = parseInt(w ? w : window.innerWidth, 10);\n\n    for (const i in breakpoints) {\n      if (breakpoints[i].value > arg) {\n        return breakpoints[i];\n      }\n    }\n    return null;\n  };\n\n  /**\n\n   @param w {Int} - \n   @return {String} - \n   */\n  const breakpointDown = (w) => {\n    const\n      arg = parseInt(w ? w : window.innerWidth, 10),\n      reversed = Array.from(breakpoints).reverse();\n\n    for (const i in reversed) {\n      if (arg > reversed[i].value) {\n        return reversed[i];\n      }\n    }\n    return breakpoints[0];\n  };\n\n  /**\n  \n   @return {Object} - { names : widths }\n   */\n  const breakpointGet = (name) => {\n\n    let ret = null;\n    breakpoints.forEach((o) => {\n      if (o.name === name) { ret = o; }\n    });\n\n    return ret;\n  };\n\n\n  /**\n  \n   @return {Object} - { names : widths }\n   */\n  const breakpointAll = () => {\n    const obj = {};\n    breakpoints.map((o) => {\n      obj[o.name] = o.value;\n    });\n\n    return obj;\n  };\n\n  const notifyPost = function(name, obj) {\n\n    const special = '*';\n\n    if (objectHas(subs, special)) {\n      for (const i in subs[special]) {\n        if (! objectHas(subs[special], i)) {\n          continue;\n        }\n        subs[special][i](obj);\n      }\n    }\n\n    if (! objectHas(subs, name)) {\n      return;\n    }\n\n    for (const i in subs[name]) {\n      if (! objectHas(subs[name], i)) {\n        continue;\n      }\n      subs[name][i](obj);\n    }\n  };\n\n  const notifySubscribe = (name, f) => {\n    if (! objectHas(subs, name)) {\n      subs[name] = [];\n    }\n    subs[name].push(f);\n  };\n\n  module.exports = {\n\n    Base64: Base64,\n\n    Tools: {\n      debug: function(/*options*/) {\n\n        const\n          div = makeElement('div', { id: 'rmr-debug' });\n\n        document.body.appendChild(div);\n        const resizer = () => {\n          const\n            w = parseInt(window.innerWidth, 10),\n            down = breakpointDown(w),\n            up = breakpointUp(w);\n\n          div.innerHTML = '<span data-popover=\"' + down.value + 'px\" title=\"' + down.value + 'px\">' + down.name + '</span>' + (up ? ':<span data-popover=\"' + up.value + 'px\" title=\"' + up.value + 'px\">' + up.name + '</span>' : '') + ', ' + w + 'px × ' + window.innerHeight + 'px';\n        };\n        window.addEventListener('resize', resizer);\n        resizer();\n      },\n      externalLinks: function(obj) {\n        const parent = (obj && obj.hasOwnProperty('root') ? getElement(obj.root) : document.body);\n        if (! parent) {\n          console.error('Node doesn\\'t exist RMR.Tools.externalLinks', parent);\n          return;\n        }\n\n        if (!obj.hasOwnProperty('exclude')) {\n          obj.exclude = [];\n        }\n\n        const\n          links = parent.querySelectorAll('a'),\n          location = document.location;\n\n        for (let i = 0; i < links.length; i++) {\n          const a = links[i];\n          if (a.protocol === 'mailto:' || a.hasAttribute('data-rmr-download') || a.hasAttribute('name')) {\n            continue;\n          }\n          if (a.host !== location.host && obj.exclude.indexOf(a.host) < 0) {\n            a.classList.add('rmr-external');\n            a.setAttribute('target', '_blank');\n          } \n        }\n      },\n      loader: function(options) {\n\n        const\n          imgs = options && objectHas(options, 'selector') ? getElements(options.selector) : getElements('img[data-rmr-src],img[data-rmr-srcset]'),\n          loader = (e) => {\n            const target = e.target || e.currentTarget;\n            target.classList.add('rmr-loaded');\n            notifyPost('rmr-load', target);\n          };\n\n        imgs.map((img) => {\n          const\n            src = img.getAttribute('data-rmr-src'),\n            srcset = img.getAttribute('data-rmr-srcset');\n          if (! src && ! srcset) {\n            console.error('No `data-rmr-src` or `data-rmr-srcset` attributes for image loader', img);\n            return;\n          }\n\n          img.addEventListener('load', loader, false);\n          if (srcset) { img.srcset = srcset; }\n          else { img.src = src; }\n        });\n      }\n    },\n\n    // document.body.addEventListener('keyup', function(e){ console.log(e.keyCode); });\n    Keyboard: {\n      next: 39,\n      previous: 37,\n      up: 38,\n      down: 40,\n      escape: 27,\n      enter: 13,\n      space: 32,\n      digits: [ 49, 50, 51, 52, 53, 54, 55, 56, 57, 48  ], // treat 0 zero as the last ordinal\n\n      /**\n       * Determine if a keyboardEvent has a modifier key associated\n       *\n       * @param {KeyboardEvent} e the event\n       * @return {Bool} `true` if event has a modifier key attached (control, shift, command, alt, etc.); `false` if not\n       */\n      hasModifier: function(e) {\n        return e.metaKey || e.altKey || e.ctrlKey || e.shiftKey;\n      },\n\n      /**\n       * Return the ordinal (0-9) of a keypress; -1 if N/A, key \"0\" return ordinal 9\n       *\n       * @param {Integer|Event} keyCode either the key code or the window event for a `keypress`\n       * @return {Integer} ordinal for the key, or -1 if N/A\n       */\n      ordinal: function(keyCode) {\n\n        keyCode = parseInt(typeof keyCode !== 'number' ? keyCode.keyCode : keyCode, 10);\n\n        if (keyCode === 48) {\n          return 9;\n        } else if (keyCode >= 49 && keyCode <= 57) {\n          return keyCode - 49;\n        }\n\n        return -1;\n      }\n    },\n\n    Date: {\n\n      /**\n       * Convert a Date instance to RFC 3339 format, ex: `2019-01-17T17:55:48Z`\n       *\n       * @param {Date} date to be formatted, optional\n       * @return {String} Date in RFC 3339 format\n       * @see https://tools.ietf.org/html/rfc3339\n       */\n      toRFC3339: function(date) {\n\n        if (! date) { date = new Date(); }\n\n        const pad = function(n) {\n          return n < 10 ? '0' + n : n;\n        };\n\n         return date.getUTCFullYear() + '-'\n              + pad(date.getUTCMonth()+1) + '-'\n              + pad(date.getUTCDate()) + 'T'\n              + pad(date.getUTCHours()) + ':'\n              + pad(date.getUTCMinutes()) + ':'\n              + pad(date.getUTCSeconds()) + 'Z';\n      },\n\n      fromRFC3339: function(dString) {\n\n        if (! dString) {\n          return null;\n        }\n\n        return new Date(dString);\n/*\n        const ret = new Date();\n\n        let utcOffset, offsetSplitChar;\n        let offsetMultiplier = 1;\n        const dateTime = dString.split(\"T\");\n        const date = dateTime[0].split(\"-\");\n        const time = dateTime[1].split(\":\");\n        const offsetField = time[time.length - 1];\n        let offsetString;\n\n        const offsetFieldIdentifier = offsetField.charAt(offsetField.length - 1);\n        if (offsetFieldIdentifier === \"Z\") {\n            utcOffset = 0;\n            time[time.length - 1] = offsetField.substr(0, offsetField.length - 2);\n        } else {\n            if (offsetField[offsetField.length - 1].indexOf(\"+\") !== -1) {\n                offsetSplitChar = \"+\";\n                offsetMultiplier = 1;\n            } else {\n                offsetSplitChar = \"-\";\n                offsetMultiplier = -1;\n            }\n            offsetString = offsetField.split(offsetSplitChar);\n            time[time.length - 1] === offsetString[0];\n            offsetString = offsetString[1].split(\":\");\n            utcOffset = (offsetString[0] * 60) + offsetString[1];\n            utcOffset = utcOffset * 60 * 1000;\n        }\n\n        ret.setTime(Date.UTC(date[0], date[1] - 1, date[2], time[0], time[1], time[2]) + (utcOffset * offsetMultiplier));\n        return ret;\n*/\n      }\n    },\n\n    OS: {\n      isApple: function() {\n        const agent = window.navigator.userAgent;\n        return agent.match('iPhone;') || agent.match('iPad;') || agent.match('iPod;')  || agent.match('Mac OS X');\n      }\n    },\n    Form: {\n      validate: validateForm,\n    },\n    Browser: {\n      isTouch: isTouch,\n      isDark: () => { return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches; },\n      isSafari: isSafari,\n      isFirefox: isFirefox,\n      scrollTo: scrollTo,\n      opensData: opensData,\n      Breakpoint: {\n\n        /**\n         \n         */\n         up: breakpointUp,\n         down: breakpointDown,\n         get: breakpointGet,\n         all: breakpointAll\n      }\n    },\n    String: {\n      isEmail: isEmail,\n      isURL: isURL,\n      guid: guid,\n      localize: localize,\n      bind: bindString,\n      formatSeconds: (seconds) => {\n\n        seconds = parseInt(seconds);\n        if (seconds < 60) {\n          return seconds + 's';\n        }\n\n        let\n        sec_num = seconds,\n        hours   = Math.floor(sec_num / 3600),\n        minutes = Math.floor((sec_num - (hours * 3600)) / 60);\n        seconds = sec_num - (hours * 3600) - (minutes * 60);\n\n        if (seconds < 10) { seconds = '0' + seconds;}\n\n        if (hours == 0) {\n          return minutes + ':' + seconds;\n        }\n        if (minutes < 10) { minutes = '0' + minutes;}\n\n        return hours + ':' + minutes + ':' + seconds;\n      }\n    },\n    Array: {\n      coerce: arr,\n      last: lastValue,\n      remove: arrayRemove,\n      find: arrayFind,\n      reorder: arrayReorder\n    },\n    Notify: {\n      post: notifyPost,\n      subscribe: notifySubscribe \n    },\n    Object: {\n      keys: objectKeys,\n      merge: objectMerge,\n      value: objectGet,\n      fromForm: objectFromForm,\n      queryString: queryString,\n      has: objectHas\n    },\n    XHR: {\n      request: xhrRequest\n    },\n    Timing: {\n      easeInOut: easeInOutQuad,\n    },\n    Map: {\n      formatLatitude: formatLatitude,\n      formatLongitude: formatLongitude\n    },\n    Node: {\n      isa: isAnElement,\n      ancestor: ancestor,\n      matches: selectorMatches,\n      remove: removeNode,\n      loader: loader,\n      get: getElement,\n      getAll: getElements,\n      prune: pruneElement,\n      listen: addListener,\n      create: makeElement,\n      getRect: getRect,\n      setStyles: setStyles,\n      setAttributes: setAttributes,\n      scrollTo: scrollNodeTo,\n      walk: walkDOM\n//      relativePosition: relativePosition\n\n    }\n  };\n\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n\n    window.addEventListener('load', () => {\n      document.body.classList.add('rmr-load');\n    });\n\n    document.addEventListener('DOMContentLoaded', () => {\n      document.body.classList.remove('rmr-nojs');\n      document.body.classList.add('rmr-js');\n\n      if (isTouch()) {\n        document.body.classList.add('rmr-touch');\n\n        const resizer = function() {\n\n          const\n          body = document.body,\n          cls = window.innerWidth > window.innerHeight ? 'rmr-landscape' : 'rmr-portrait';\n\n          body.classList.remove('rmr-landscape');\n          body.classList.remove('rmr-portrait');\n\n          body.classList.add(cls);\n        };\n\n        window.addEventListener('orientationchange', () => {\n          resizer();\n        });\n\n        resizer();\n\n      } else {\n        const\n        body = document.body,\n        hover = 'rmr-hover',\n        out = 'rmr-nohover';\n\n        body.addEventListener('mouseenter', () => {\n          body.classList.add(hover);\n          body.classList.remove(out);\n        });\n\n        body.addEventListener('mouseleave', () => {\n          body.classList.remove(hover);\n          body.classList.add(out);\n        });\n      }\n    });\n  }\n\n\n/*\n  (function() {\n    var elements = ['section', 'article', 'aside', 'header', 'footer', 'nav', 'figure', 'figcaption', 'time', 'mark', 'main'];\n    for (const i in elements) {\n      if (elements.hasOwnProperty(i)) {\n        console.log(elements[i]);\n        document.createElement(elements[i]);\n      }\n    }\n  })();\n*/\n})();\n\n\n//# sourceURL=webpack:///./node_modules/rmr-util/index.js?");

/***/ }),

/***/ "./src/scripts/build.js":
/*!******************************!*\
  !*** ./src/scripts/build.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* global require, module, console, Promise */\n\n(function() {\n\n  'use strict';\n  window.RMRSearch = __webpack_require__(/*! ./rmr-search.js */ \"./src/scripts/rmr-search.js\");\n\n})();\n\n//# sourceURL=webpack:///./src/scripts/build.js?");

/***/ }),

/***/ "./src/scripts/rmr-search.js":
/*!***********************************!*\
  !*** ./src/scripts/rmr-search.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n(function() {\n\n  'use strict';\n\n  const\n  RMR = __webpack_require__(/*! rmr-util */ \"./node_modules/rmr-util/index.js\"),\n  Fuse = __webpack_require__(/*! fuse.js */ \"./node_modules/fuse.js/dist/fuse.esm.js\");\n\n  /**\n    'node': querySelector or Node reference\n    'index': path to JSON file\n    'fuse': options dictionary for fuse (https://fusejs.io/api/options.html)\n    'max': the maximum number of items to display in the results list\n    'format': function that takes a single object from the JSON file, or `null` if nothing matches\n   */\n  const init = function(options) {\n\n    if (arguments.length == 0) {\n      options = {\n        node: '.rmr-search'\n      };\n    }\n\n    let\n    fuse = null, // search engine\n    searchVisible = true,\n    parent = RMR.Object.has(options, 'node') ? RMR.Node.get(options.node) : document.querySelector('.rmr-search'),\n    list = RMR.Node.create('ul'),\n    first = null, // first child of search list\n    last = null, // last child of search list\n    input = parent ? parent.querySelector('input') : null, // input box for search\n    resultsAvailable = false; // Did we get any search results?\n\n    const\n    max = RMR.Object.has(options, 'max') ? parseInt(options.max, 10) : 5,\n    index = RMR.Object.has(options, 'index') ? options.index : 'index.json',\n    format = RMR.Object.has(options, 'format') ? options.format : (obj) => { return obj; },\n    fuseOptions = options.fuse;\n\n    if (! parent) {\n      console.error('no parent for rmr-search');\n      return;\n    }\n\n    parent.appendChild(list);\n\n    const svg = parent.querySelector(':scope > svg');\n    if (svg) {\n      svg.addEventListener('click', (e) => {\n        input.focus();\n      });\n    }\n\n    // if \n    document.addEventListener('mouseup', (e) => {\n      const\n      target = e.target,\n      isChild = RMR.Node.ancestor(target, parent, true);\n\n      if (! isChild) {\n        executeSearch(null);\n      }\n    });\n  \n    document.addEventListener('keydown', (e) => {\n\n      if (e.keyCode == 40) { // down\n        if (searchVisible && resultsAvailable) {\n          e.preventDefault();\n          if (document.activeElement === input) {\n            first.focus();\n          }\n          else if (document.activeElement === last ) {\n            input.focus();\n          }\n          else { // otherwise select the next search result\n            const li = RMR.Node.ancestor(document.activeElement, 'li');\n            li.nextSibling.querySelector('a').focus();\n          } \n        }\n      }\n\n      if (e.keyCode == 38) { // up\n        if (searchVisible && resultsAvailable) {\n          e.preventDefault(); // stop window from scrolling\n          if (document.activeElement === input) {\n            \n          }\n          else if (document.activeElement === first) {\n            input.focus();\n          } // If we're at the first item, go to input box\n          else {\n            const li = RMR.Node.ancestor(document.activeElement, 'li');\n            li.previousSibling.querySelector('a').focus();\n          } // Otherwise, select the search result above the current active one\n        }\n      }\n    });\n\n    input.addEventListener('focus', (e) => {\n\n      if (fuse !== null && e.target.value.trim() != '') {\n        executeSearch(e.target.value.trim());\n      }\n      else if (fuse === null) {\n        fetchJSONFile(index, function(data) {\n          fuse = new Fuse.default(data, fuseOptions);\n        });\n      }\n    });\n\n    input.addEventListener('blur', (e) => {\n      if (e.target.value === '') {\n        executeSearch(null);\n      }\n    });\n\n    input.addEventListener('input', (e) => {\n      if (e.target.value.length > 1) {\n        executeSearch(e.target.value.trim());\n      } else {\n        executeSearch(null);\n      }\n    });\n\n\n    function fetchJSONFile(path, callback) {\n      if (! callback) { return; }\n\n      const req = new XMLHttpRequest();\n      req.onreadystatechange = function() {\n        if (req.readyState === 4 && req.status === 200) {\n          callback(JSON.parse(req.responseText));\n        }\n      };\n      req.open('GET', path);\n      req.send();\n    }\n\n    function executeSearch(term) {\n\n      let results = [];\n      let searchitems = '';\n\n      if (term === null || term === '') {\n        resultsAvailable = false;\n      } else {\n\n        results = fuse.search(term);\n\n        if (results.length === 0) {\n          resultsAvailable = false;\n          searchitems = `<li class=\"empty\">${format(null)}</li>`;\n        } else {\n\n          let urls = [];\n          for (let item in results.slice(0,max)) {\n            const obj = results[item].item;\n            if (urls.indexOf(obj.permalink) < 0) {\n              searchitems += `<li>${format(obj)}</li>`;\n              urls.push(obj.permalink);\n            }\n          }\n          resultsAvailable = true;\n        }\n      }\n\n      list.innerHTML = searchitems;\n      if (results.length > 0) {\n        first = list.firstChild.querySelector('a');\n        last = list.lastChild.querySelector('a');\n      }\n    }\n  }\n\n  module.exports = init;\n\n})();\n\n//# sourceURL=webpack:///./src/scripts/rmr-search.js?");

/***/ })

/******/ });